#!/usr/bin/env ruby
# frozen_string_literal: true

$LOAD_PATH.unshift File.expand_path('../lib', __dir__)

require 'logger'
require 'pinboard'
require 'ruby-progressbar'
require 'optparse'

require 'pinboard-fixup-tweets/repository'
require 'pinboard-fixup-tweets/stats'

# rubocop:disable Metrics/MethodLength
def setup_logger
  logger = Logger.new(STDERR)
  logger.progname = File.basename(__FILE__)
  desired_log_level = ENV.fetch('LOG_LEVEL', 'INFO')

  begin
    logger.level = Logger::Severity.const_get(desired_log_level)
  rescue NameError
    logger.level = Logger::Severity::WARN
    logger.warn("Error evaluating log level #{desired_log_level}." \
                "Using #{Logger::Severity.constants[logger.level]} instead.")
  end

  logger
end
# rubocop:enable Metrics/MethodLength

logger = setup_logger
format = nil
limit = Float::INFINITY

begin
  OptionParser.new do |opts|
    opts.on('-f',
            '--stats-format=FORMAT',
            'Output format. Determines the FORMAT in which stats are printed.') do |f|
      logger.info "Printing stats in #{f} format"
      format = f
    end

    opts.on('-l',
            '--limit=NUMBER',
            OptionParser::DecimalInteger,
            'Limit the number of processed posts by NUMBER') do |l|
      if l <= 0
        warn 'Error: Limit must be > 0'
        exit 1
      end

      logger.warn "Processing will be limited to the first #{l} posts"
      limit = l
    end
  end.parse!
rescue StandardError => e
  warn "Error: #{e.message}"
  exit 1
end

stats = PinboardFixupTweets::Stats.new(File.basename($PROGRAM_NAME))

if Signal.list['INFO']
  trap('INFO') do
    warn stats
  end
end

trap('INT') do
  warn "Interrupted. #{stats}"
  exit 1
end

pinboard_api_token = ENV['PINBOARD_API_TOKEN']

if pinboard_api_token
  pinboard = Pinboard::Client.new(token: pinboard_api_token)
  logger.info "Logged on to Pinboard as #{pinboard_api_token.split(':').first}"
else
  logger.error 'Pinboard API token missing.'
  exit 1
end

repository = PinboardFixupTweets::Repository.new
posts = pinboard.posts(meta: true)
stats.gauge(:total, posts.size)
limit = [limit, posts.size].min
stats.gauge(:limit, limit)
logger.info "Processing #{limit} bookmarks"

progressbar = ProgressBar.create(total: limit, output: $stderr)

# rubocop:disable Metrics/BlockLength
posts.first(limit).each do |post|
  md = %r(^https://twitter.com/\w+/status/(?<id>\d{5,})).match(post.href)

  unless md
    stats.increment(:not_applicable)
    next
  end

  tweet = repository.tweet(md[:id])
  screen_name = "@#{tweet.user.screen_name}"

  tags = post.tag
  tags << 'twitter' unless tags.include?('twitter')
  tags << 'pinboard-fixup-tweets' unless tags.include?('pinboard-fixup-tweets')
  tags << screen_name unless tags.include?(screen_name)

  pinboard.add(
    url: post.href,
    description: tweet.text,
    extended: post.extended,
    tags: tags,
    replace: 'yes',
    shared: post.shared || 'yes',
    toread: post.toread
  )

  logger.info "Updated #{post.href} with title: #{tweet.text}"
  stats.increment(:updated)
rescue Twitter::Error::TooManyRequests => e
  logger.warn "Ouch! We hit Twitter's rate limit. " \
              "Need to sleep until #{e.rate_limit.reset_at} before we can try again."
  stats.increment(e.class.name)
  sleep e.rate_limit.reset_in + 1
  retry
rescue StandardError => e
  stats.increment(e.class.name)
  logger.error "Could not handle #{post.href}: #{e.class} - #{e.message}"
ensure
  progressbar.increment
end
# rubocop:enable Metrics/BlockLength

logger.info 'Done'

if format == 'json'
  puts stats.to_json
else
  puts stats.to_s
end
